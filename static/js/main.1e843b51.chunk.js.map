{"version":3,"sources":["atoms/TargetLink.js","App.js","serviceWorker.js","index.js"],"names":["TargetLink","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","href","target","rel","text","Component","Leaflet","Icon","Default","imagePath","style","h1","marginTop","h2","margin","h3","padding","last","marginBottom","App","_this","state","info","fetch","res","json","setState","Header","as","content","textAlign","Container","Map","center","zoom","TileLayer","attribution","url","map","e","stores","store","key","Marker","position","lat","lng","Popup","atoms_TargetLink","tweetLink","name","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAmBeA,cAfb,SAAAA,EAAYC,GAAQ,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KACZH,yTAMN,OACEO,EAAAC,EAAAC,cAAA,KAAGC,KAAMP,KAAKH,MAAMU,KAAMC,OAAO,SAASC,IAAI,uBAC3CT,KAAKH,MAAMa,aAVKC,aCkBzBC,IAAQC,KAAKC,QAAQC,UACnB,+DAEF,IAAMC,EAAQ,CACZC,GAAI,CACFC,UAAW,OAEbC,GAAI,CACFC,OAAQ,eAEVC,GAAI,CACFH,UAAW,MACXI,QAAS,WAEXC,KAAM,CACJC,aAAc,UA+CHC,cA1Cb,SAAAA,IAAc,IAAAC,EAAA,OAAA5B,OAAAC,EAAA,EAAAD,CAAAE,KAAAyB,IACZC,EAAA5B,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2B,GAAAtB,KAAAH,QACK2B,MAAQ,CACXC,KAAM,IAHIF,mNAQMG,MAChB,iHADIC,kBAGaA,EAAIC,cAAjBH,SACN5B,KAAKgC,SAAS,CAAEJ,4IAGT,IACCA,EAAS5B,KAAK2B,MAAdC,KACR,OACExB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,CAAQC,GAAG,KAAKC,QAAQ,YAAYnB,MAAOA,EAAMC,GAAImB,UAAU,WAC/DhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAKC,OAAQ,CAAC,WAAY,aAAcC,KAAM,IAC5CpC,EAAAC,EAAAC,cAACmC,EAAA,EAAD,CACEC,YAAY,0EACZC,IAAI,uDAELf,EAAKgB,IAAI,SAAAC,GACR,OAAOA,EAAEC,QAAUD,EAAEC,OAAOF,IAAI,SAACG,EAAOC,GACtC,OAAQ5C,EAAAC,EAAAC,cAAC2C,EAAA,EAAD,CAAQD,IAAKA,EAAKE,SAAU,CAACH,EAAMI,IAAKJ,EAAMK,MACpDhD,EAAAC,EAAAC,cAAC+C,EAAA,EAAD,KACEjD,EAAAC,EAAAC,cAACgD,EAAD,CAAY/C,KAAMsC,EAAEU,UAAW7C,KAAMqC,EAAMS,uBA/B7C7C,2BC5BE8C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCVnCC,IAASC,OAAO3D,EAAAC,EAAAC,cAAC0D,EAAD,MAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1e843b51.chunk.js","sourcesContent":["/* eslint-disable no-useless-constructor */\nimport React, { Component } from 'react'\n\nclass TargetLink extends Component {\n  constructor(props) {\n    super(props)\n  }\n\n  async componentDidMount() {}\n\n  render() {\n    return (\n      <a href={this.props.href} target=\"_blank\" rel=\"noopener noreferrer\">\n        {this.props.text}\n      </a>\n    )\n  }\n}\n\nexport default TargetLink\n","/* eslint-disable no-useless-constructor */\nimport React, { Component } from 'react'\nimport {\n  Button,\n  Container,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Item,\n  Label,\n  Menu,\n  Segment,\n  Step,\n  Table\n} from 'semantic-ui-react'\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet'\nimport 'leaflet/dist/leaflet.css'\nimport Leaflet from 'leaflet'\nimport TargetLink from './atoms/TargetLink'\n\nLeaflet.Icon.Default.imagePath =\n  'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/'\n\nconst style = {\n  h1: {\n    marginTop: '3em'\n  },\n  h2: {\n    margin: '4em 0em 2em'\n  },\n  h3: {\n    marginTop: '2em',\n    padding: '2em 0em'\n  },\n  last: {\n    marginBottom: '300px'\n  }\n}\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      info: []\n    }\n  }\n\n  async componentDidMount() {\n    const res = await fetch(\n      'https://script.google.com/macros/s/AKfycbyzNqxPtInjD8kDqZiD_kVr9MavY655S8oPR-uixuafnG-9YkU/exec'\n    )\n    const info = await res.json()\n    this.setState({ info })\n  }\n\n  render() {\n    const { info } = this.state\n    return (\n      <div>\n        <Header as=\"h1\" content=\"Hatsu Log\" style={style.h1} textAlign=\"center\"/>\n        <Container>\n          <Map center={[35.6455172, 139.7118403]} zoom={12}>\n            <TileLayer\n              attribution=\"&amp;copy <a href=&quot;http://osm.org/copyright&quot;>OpenStreetMap</a> contributors\"\n              url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            />\n            {info.map(e => {\n              return e.stores && e.stores.map((store, key) => {\n                return (<Marker key={key} position={[store.lat, store.lng]}>\n                  <Popup>\n                    <TargetLink href={e.tweetLink} text={store.name}/>\n                  </Popup>\n                </Marker>)\n              })\n            })}\n          </Map>\n        </Container>\n      </div>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.')\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}